// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gosom/scrapemate (interfaces: HtmlParser)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHtmlParser is a mock of HtmlParser interface.
type MockHtmlParser struct {
	ctrl     *gomock.Controller
	recorder *MockHtmlParserMockRecorder
}

// MockHtmlParserMockRecorder is the mock recorder for MockHtmlParser.
type MockHtmlParserMockRecorder struct {
	mock *MockHtmlParser
}

// NewMockHtmlParser creates a new mock instance.
func NewMockHtmlParser(ctrl *gomock.Controller) *MockHtmlParser {
	mock := &MockHtmlParser{ctrl: ctrl}
	mock.recorder = &MockHtmlParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHtmlParser) EXPECT() *MockHtmlParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockHtmlParser) Parse(arg0 context.Context, arg1 []byte) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockHtmlParserMockRecorder) Parse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockHtmlParser)(nil).Parse), arg0, arg1)
}
